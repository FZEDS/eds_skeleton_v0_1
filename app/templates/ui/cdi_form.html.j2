{% extends "layout.html.j2" %}
{% block content %}
  {% from 'components/macros.html.j2' import callout, error_msg %}

<link rel="stylesheet" href="{{ url_for('static', path='css/eds.css') }}">

<!-- Styles locaux (CDI) ‚Äî tout est dans static/css/eds.css -->
<style></style>

<div class="toolbar">
  <button type="button" class="btn-ghost" id="btn-save">Enregistrer</button>
  <button type="button" class="btn" id="btn-preview">Aper√ßu</button>
</div>

<h2>CDI ‚Äî Cr√©ation</h2>
<div class="progress"><i id="progress"></i></div>

<div class="formgrid">
  <!-- Colonne principale -->
  <section class="maincol">

<!-- STEP 1 -->
<div class="step card" data-step="1" aria-hidden="false">
  <h3>01. L‚Äôentreprise employeur</h3>

  <div class="grid2">
    <div>
      <label>Nom de l‚Äôentreprise</label>
      <input name="employer_name" data-required="true" placeholder="D√©nomination sociale">
    </div>
    <div>
      <label>Forme sociale</label>
      <input name="legal_form" data-required="true" placeholder="SAS, SARL, SA‚Ä¶">
    </div>
  </div>

  <div class="grid2">
    <div>
      <label>Num√©ro SIREN
        <span class="help" title="Num√©ro SIREN √† 9 chiffres (√©galement n¬∞ RCS). Visible sur le Kbis ou sur https://www.infogreffe.fr">i</span>
      </label>
      <input name="siren_number" inputmode="numeric" pattern="\d{9}" maxlength="9" placeholder="9 chiffres" data-required="true">
    </div>
    <div>
      <label>Num√©ro Urssaf</label>
      <input name="urssaf_number" data-required="true" placeholder="Ex. 75 1234567 89">
    </div>
  </div>

  <div>
    <label>Adresse du si√®ge social</label>
    <input name="employer_address" data-required="true" placeholder="N¬∞ et voie, compl√©ments">
  </div>

  <div class="grid2">
    <div>
      <label>Code postal</label>
      <input name="employer_postal_code" inputmode="numeric" pattern="\d{4,5}" maxlength="5" data-required="true">
    </div>
    <div>
      <label>Commune</label>
      <input name="employer_city" data-required="true" placeholder="Ville">
    </div>
  </div>

  <h4 style="margin-top:10px">Repr√©sentant de l‚Äôentreprise</h4>
  <div class="grid3">
    <div>
      <label>Civilit√©</label>
      <select name="rep_civility" data-required="true">
        <option>Madame</option><option>Monsieur</option>
      </select>
    </div>
    <div>
      <label>Nom</label>
      <input name="rep_last_name" data-required="true" placeholder="NOM">
    </div>
    <div>
      <label>Pr√©nom</label>
      <input name="rep_first_name" data-required="true" placeholder="Pr√©nom">
    </div>
  </div>
  <div>
    <label>Fonction</label>
    <input name="rep_title" data-required="true" placeholder="Pr√©sident, G√©rant‚Ä¶">
  </div>
  <!-- requis par le backend : rep_name (compos√© automatiquement) -->
  <input type="hidden" name="rep_name" id="rep_name_hidden">

  <div class="hintbar">
    üí° Le contrat doit √™tre sign√© par le repr√©sentant l√©gal de l'entreprise ou √† d√©faut par une personne en interne b√©n√©ficiaire d'une d√©l√©gation de signature ou de pouvoirs valable.
  </div>

  <div class="actions">
    <span></span>
    <button class="btn-primary" data-next>Suivant</button>
  </div>
</div>

<!-- STEP 2 -->
<div class="step card" data-step="2" aria-hidden="true">
  <h3>02. Identit√© du salari√©</h3>

  <div class="grid3">
    <div>
      <label>Civilit√©</label>
      <select name="employee_civility" data-required="true">
        <option>Madame</option><option>Monsieur</option>
      </select>
    </div>
    <div>
      <label>Nom</label>
      <input name="employee_last_name" data-required="true" placeholder="NOM">
    </div>
    <div>
      <label>Pr√©nom</label>
      <input name="employee_first_name" data-required="true" placeholder="Pr√©nom">
    </div>
  </div>

  <div>
    <label>Adresse postale</label>
    <input name="employee_address" data-required="true" placeholder="N¬∞ et voie, compl√©ments">
  </div>

  <div class="grid2">
    <div>
      <label>Code postal</label>
      <input name="employee_postal_code" inputmode="numeric" pattern="\d{5}" maxlength="5" data-required="true" placeholder="75001">
    </div>
    <div>
      <label>Commune</label>
      <input name="employee_city" data-required="true" placeholder="Paris">
    </div>
  </div>

  <div class="grid2">
    <div>
      <label>Nationalit√©</label>
      <input name="nationality" data-required="true" placeholder="Fran√ßaise, ‚Ä¶">
    </div>
    <div>
      <label>N¬∞ de s√©curit√© sociale
        <span class="help" title="Num√©ro de s√©curit√© sociale (NIR) ‚Äî 15 chiffres. Visible sur la carte Vitale.">i</span>
      </label>
      <input name="ssn" inputmode="numeric" pattern="[0-9 ]{13,15}" data-required="true" placeholder="15 chiffres">
    </div>
  </div>

  <div class="grid2">
    <div>
      <label>Date de naissance</label>
      <input type="date" name="birth_date" data-required="true">
    </div>
    <div>
      <label>Lieu de naissance</label>
      <input name="birth_place" data-required="true" placeholder="Ville, pays">
    </div>
  </div>

  <!-- requis par le backend : nom complet (compos√© automatiquement) -->
  <input type="hidden" name="employee_name" id="employee_name_hidden">

  <div class="actions">
    <button class="btn" data-prev>Pr√©c√©dent</button>
    <button class="btn-primary" data-next>Suivant</button>
  </div>
</div>

{% include 'steps/common/_03_ccn_ae.html.j2' %}
{% include 'steps/common/_04_poste_classif.html.j2' %}
{% include 'steps/common/_05_temps_travail.html.j2' %}
{% include 'steps/common/_06_remuneration.html.j2' %}
{% include 'steps/common/_07_essai.html.j2' %}
{% include 'steps/common/_08_preavis.html.j2' %}


<!-- STEP 9 -->
<div class="step card" data-step="9" aria-hidden="true">
  <h3>09. Clauses additionnelles</h3>

  <div class="callout callout-info" style="margin-bottom:8px">
    Cochez les clauses √† ajouter au contrat. Vous pouvez aussi ajouter une clause sp√©cifique r√©dig√©e librement.
  </div>

  <!-- Catalogue de clauses -->
  <div id="clauses_catalog" class="clauses-list" aria-live="polite"></div>

  <!-- Clauses sp√©cifiques (custom) -->
  <div class="fieldset" style="margin-top:12px">
    <h4 style="margin:0 0 6px">Ajouter une autre clause sp√©cifique</h4>
    <div id="custom_clauses_list"></div>
    <div class="muted-note" style="margin:6px 0 8px">
      Renseignez un titre et le contenu ci‚Äëdessous. 
    </div>
    <div class="warning-banner">
      üö® Vous √™tes responsable de ce que vous √©crivez ici. Relisez-la attentivement et, si vous avez un doute sur la r√©daction, contactez un avocat.
    </div>
    <button type="button" class="btn" id="btn_add_custom_clause" style="margin-top:8px">+ ajouter une clause</button>
  </div>

  <!-- Hidden payloads pour le POST -->
  <input type="hidden" id="clauses_selected_json" name="clauses_selected_json">
  <input type="hidden" id="clauses_custom_json" name="clauses_custom_json">
  <input type="hidden" id="clauses_params_json" name="clauses_params_json">

  <div class="actions" style="margin-top:10px">
    <button class="btn" data-prev>Pr√©c√©dent</button>
    <button class="btn-primary" data-next>Suivant</button>
  </div>
</div>

<!-- STEP 10 -->
<div class="step card" data-step="10" aria-hidden="true">
  <h3>10. Formalit√©s</h3>

  <hr class="divider">

  <!-- Bloc A ‚Äî Protection sociale -->
  <div class="fieldset" style="margin-top:10px">
    <h4 style="margin:0 0 6px">
      Protection sociale
      <span class="help" title="La mention des r√©gimes de protection sociale est obligatoire en application du 14¬∞ de l'article R1221-24 du Code du travail.">i</span>
    </h4>
    <div class="grid2">
      <div>
        <label>Identit√© de l'organisme de mutuelle
          <span class="help" title="Obligatoire pour toute entreprise du secteur priv√©">i</span>
        </label>
        <input name="health_org" placeholder="Ex. Harmonie Mutuelle, Alan‚Ä¶">
      </div>
      <div>
        <label>Caisse de retraite compl√©mentaire (facultatif)</label>
        <input name="retirement_org" placeholder="Ex. Agirc‚ÄëArrco / institution">
      </div>
    </div>
    <div style="margin-top:8px">
      <label>Pr√©voyance (facultatif)</label>
      <input name="welfare_org" placeholder="Ex. APICIL‚Ä¶">
    </div>
  </div>

  <hr class="divider">

  <!-- Bloc B ‚Äî DPAE & URSSAF -->
  <div class="fieldset" style="margin-top:10px">
    <h4 style="margin:0 0 6px">DPAE & URSSAF</h4>
    <div class="grid3">
      <div><label>URSSAF (ville)</label><input name="dpae_urssaf_city" placeholder="Ex. Paris"></div>
      <div><label>Date DPAE</label><input type="date" name="dpae_date"></div>
      <div></div>
    </div>
  </div>
  
  <hr class="divider">

  <!-- Bloc C ‚Äî Signatures -->
  <div class="fieldset" style="margin-top:10px">
    <h4 style="margin:0 0 6px">Signature</h4>
    <div class="grid3">
      <div><label>Fait √†</label><input name="place_of_signature" data-required="true" placeholder="Ville"></div>
      <div><label>Le</label><input type="date" name="date_of_signature" data-required="true"></div>
      <div><label>Nb exemplaires</label><input type="number" min="1" value="2" name="copies_count" data-required="true"></div>
    </div>
  </div>

  <hr class="divider">

  <div class="actions">
    <button class="btn" data-prev>Pr√©c√©dent</button>
    <button class="btn-primary" id="btn-submit">G√©n√©rer le PDF</button>
  </div>
  <p class="muted" style="margin-top:6px">Un PDF + un snapshot de conformit√© seront produits.</p>
</div>

  </section>

  <!-- Sommaire -->
  <aside class="summary">
    <h4>Sommaire</h4>
    <ol class="steps" id="steps">
      <li data-step="1">1. L‚Äôentreprise employeur</li>
      <li data-step="2">2. Identit√© du salari√©</li>
      <li data-step="3">3. Convention collective</li>
      <li data-step="4">4. Poste & classification</li>
      <li data-step="5">5. Dur√©e du travail</li>
      <li data-step="6">6. R√©mun√©ration</li>
      <li data-step="7">7. P√©riode d‚Äôessai</li>
      <li data-step="8">8. Pr√©avis & Cong√©s</li>
      <li data-step="9">9. Clauses additionnelles</li>
      <li data-step="10">10. Formalit√©s</li>
    </ol>
  </aside>
</div>

<!-- Overlay aper√ßu -->
<div class="overlay" id="overlay" style="display:none">
  <div class="panel">
    <header>
      <strong>Aper√ßu (synth√®se des champs)</strong>
      <button class="btn" id="close-overlay">Fermer</button>
    </header>
    <div id="preview-body" class="muted"></div>
  </div>
</div>

<!-- Overlay confirmation finale (avant g√©n√©ration d√©finitive) -->
<div class="overlay" id="confirm-overlay" style="display:none">
  <div class="panel">
    <header>
      <strong>V√©rification finale</strong>
      <button class="btn" id="close-confirm">Annuler</button>
    </header>
    <div id="confirm-body" class="muted"></div>
    <div style="display:flex; gap:8px; justify-content:flex-end; margin-top:10px">
      <button class="btn" id="confirm-fix">Corriger</button>
      <button class="btn-primary" id="confirm-submit">Confirmer et g√©n√©rer</button>
    </div>
  </div>
</div>


<script>
(function(){
  'use strict';

  /* ==========================
     Utilitaires DOM & √âtat
  ===========================*/

  const $  = (s)=>document.querySelector(s);
  const $$ = (s)=>Array.from(document.querySelectorAll(s));
  window.EDS_DEBUG = true;

  const steps = Array.from(document.querySelectorAll('.step'));
  let i = 0; // index d'√©tape (0-based)
  function stepEl(n){ return document.querySelector(`.step[data-step="${n}"]`); }

  // Caches "runtime"
  let GLOBAL_CAPABILITIES = {};  // cumule ce que renvoient les endpoints

  /* ==========================
     Helpers "m√©tier"
  ===========================*/

  function escapeHtml(str){
    return String(str).replace(/[&<>"']/g, m => (
      {'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[m]
    ));
  }
  function escapeAttr(str){ return String(str).replace(/"/g,'&quot;'); }

  function getIdcc(){
    const v = parseInt($('#idcc')?.value || '', 10);
    return Number.isNaN(v) ? null : v;
  }
  function getCategorie(){ return ($('#categorie')?.value || 'non-cadre').toLowerCase(); }

  // Extraction robuste du coefficient depuis la cha√Æne de classification
  function coeffFromClassif(){
    const raw = $('#classification_level')?.value || '';
    const m1 = raw.match(/co[e√©]f(?:ficient)?\s*[:\-]?\s*(\d{2,3})/i);
    if (m1) return parseInt(m1[1], 10);
    const all = Array.from(raw.matchAll(/\b(\d{2,3})\b/g)).map(m => parseInt(m[1], 10));
    if (all.length) return Math.max(...all);
    return null;
  }

  // UI -> API mapping
  function getUiWorkTimeRaw(){
    return document.querySelector('input[name="work_time_mode"]:checked')?.value || 'standard_35h';
  }
  function getWorkTimeModeForApi(){
    const wtRaw  = getUiWorkTimeRaw();
    const regime = document.querySelector('input[name="work_time_regime"]:checked')?.value || 'temps_complet';
    if (wtRaw === 'standard_35h') return (regime === 'temps_partiel') ? 'part_time' : 'standard';
    if (wtRaw === 'modalite_2') return 'forfait_hours_mod2';
    return wtRaw; // 'forfait_hours' | 'forfait_days'
  }

  // Contexte commun ‚Äî utilis√© par d‚Äôautres modules √©ventuels
  function collectContext(){
    const uiMode = getUiWorkTimeRaw();
    const apiMode = getWorkTimeModeForApi();
    let weeklyHours = null;
    if (uiMode === 'standard_35h')      { const el = $('#weekly_hours_std'); if (el?.value) weeklyHours = parseFloat(String(el.value).replace(',', '.')); }
    else if (uiMode === 'forfait_hours'){ const el = $('#weekly_hours_fh');  if (el?.value) weeklyHours = parseFloat(String(el.value).replace(',', '.')); }
    else if (uiMode === 'modalite_2')   { const el = $('#weekly_hours_m2');  if (el?.value) weeklyHours = parseFloat(String(el.value).replace(',', '.')); }

    const fj = (uiMode === 'forfait_days')
      ? (parseInt($('#forfait_days_per_year')?.value || '', 10) || null)
      : null;

    return {
      idcc: getIdcc(),
      categorie: getCategorie(),
      coeff: coeffFromClassif(),
      classification_level: $('#classification_level')?.value || '',
      as_of: $('#contract_start')?.value || new Date().toISOString().slice(0,10),
      work_time_mode: apiMode,
      weekly_hours: weeklyHours,
      forfait_days_per_year: fj,
      anciennete_months: (parseInt($('#seniority_years')?.value || '0',10)*12) + (parseInt($('#seniority_months')?.value || '0',10))
    };
  }

  /* ==========================
     Non‚Äëcompliances & override
  ===========================*/

  const EDS_NON_COMPLIANCES = new Map(); // key -> payload
  const EDS_OVERRIDES_STEPS = new Set();
  function upsertNonCompliance(key, payload){ if(!key) return; EDS_NON_COMPLIANCES.set(key, payload); }
  function clearNonCompliance(key){ if(!key) return; EDS_NON_COMPLIANCES.delete(key); }

  function setNextDisabled(stepNumber, disabled){
    const btn = stepEl(stepNumber)?.querySelector('[data-next]');
    if(btn){ btn.disabled = !!disabled; btn.classList.toggle('disabled', !!disabled); }
  }

  /* ==========================
     UI statique & slots explications
  ===========================*/

  function normalizeStaticLabels(){
    const syntecBadge = document.querySelector('.step[data-step="5"] h3 .badge');
    if (syntecBadge) syntecBadge.remove();

    // √âtape 6 : masque la Prime de vacances hardcod√©e, si pr√©sente
    const step6Callouts = $$('.step[data-step="6"] .callout');
    step6Callouts.forEach(node=>{
      const txt = (node.textContent||'').toLowerCase();
      if (txt.includes('prime de vacances') || txt.includes('syntec')) node.style.display='none';
    });
  }

  const SLOT_TARGETS = {
    'step4.header':            '#step4_header_card',
    'step5.header':            '#slot_step5_header',
    'step5.footer':            '#worktime_card',
    'step5.block.fh':          '#fh_card',
    'step5.block.fd':          '#fd_guard',
    'step5.block.m2':          '#m2_card',
    'step6.footer':            '#salary_card',
    'step6.more.minima':       '#salary_more_minima_body',
    'step6.more.ccn_primes':   '#salary_more_primes_body',
    'step7.card':              '#probation_zoom_body',
    'step7.prior':             '#essai_prior',
    'step7.renewal':           '#essai_renewal',
    'step8.card':              '#notice_card',
    'step8.conges':            '#cp_card',
    'step10.card':             '#cp_card',
  };

  function clearSlot(sel){
    const node = (typeof sel === 'string') ? document.querySelector(sel) : sel;
    if(!node) return;
    node.innerHTML = '';
    node.style.display = 'none';
    node.classList.remove('callout-info','callout-ccn','callout-warn');
    if (!node.classList.contains('callout')) node.classList.add('callout');
  }
  function clearSalaryExplain(){
    clearSlot('#salary_card');
    clearSlot('#salary_more_minima_body');
    clearSlot('#salary_more_primes_body');
  }

  function renderExplain(explainItems){
    if(!Array.isArray(explainItems) || explainItems.length===0) return;

    const bySlot = new Map();
    explainItems.forEach(it=>{
      const slot = it.slot || 'step5.footer';
      if(!bySlot.has(slot)) bySlot.set(slot, []);
      const k = String(it.kind || 'info').toLowerCase();
      it._kind = (k==='guard'?'warn':k);
      bySlot.get(slot).push(it);
    });

    const rank = k => (k==='warn'?3 : (k==='ccn'?2 : 1));

    // √âchappement disponible pour tout le rendu (hors forEach)
    const escapeHtml2 = (str)=> String(str||'').replace(/[&<>"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[m]));

    const renderRich = (raw)=>{
      const s = String(raw||'');
      const lines = s.split('\n');
      let html = '';
      let ul = [];
      const pushUl = ()=>{ if (ul.length){ html += '<ul>'+ul.map(x=>`<li>${escapeHtml2(x)}</li>`).join('')+'</ul>'; ul = []; } };
      lines.forEach(line=>{
        const t = line.trim();
        if (t.startsWith('- ')){
          ul.push(t.slice(2));
        } else {
          pushUl();
          html += escapeHtml2(t) + '<br>';
        }
      });
      pushUl();
      // retire un <br> final √©ventuel
      if (html.endsWith('<br>')) html = html.slice(0,-4);
      return html;
    };

    bySlot.forEach((items, slot)=>{
      const targetSel = (window.SLOT_TARGETS && window.SLOT_TARGETS[slot]) || SLOT_TARGETS[slot];
      if(!targetSel) return;
      const node = document.querySelector(targetSel);
      if(!node) return;

      node.classList.add('callout');
      node.classList.remove('callout-info','callout-ccn','callout-warn');
      const variant = items.map(x=>x._kind).sort((a,b)=>rank(b)-rank(a))[0] || 'info';
      node.classList.add( variant==='warn' ? 'callout-warn' : (variant==='ccn' ? 'callout-ccn' : 'callout-info') );
      node.setAttribute('role', variant==='warn' ? 'alert' : 'region');
      node.setAttribute('aria-label', variant==='warn' ? 'Avertissement' : (variant==='ccn' ? 'Information CCN' : 'Information'));

      // Fusion cibl√©e pour step5.header : regrouper plusieurs hints en un bloc plus lisible
      if (slot === 'step5.header' && items.length > 1){
        const kindRanked = items.map(x=>x._kind).sort((a,b)=>rank(b)-rank(a))[0] || 'info';
        const emote = (kindRanked==='warn' ? '‚ö†Ô∏è' : (kindRanked==='ccn' ? 'üìò' : 'üí°'));
        const body = items.map(x=> renderRich(x.text||'')).join('<br>');
        const refs = items.map(x=>{
          if (x.url) return `<a href="${x.url}" target="_blank" rel="noopener">${escapeHtml2(x.ref||'R√©f.')}</a>`;
          if (x.ref) return escapeHtml2(x.ref);
          return null;
        }).filter(Boolean).join(' ¬∑ ');
        const refHtml = refs ? `<br><small>${refs}</small>` : '';
        node.innerHTML = `<div class="co-line" style="margin:8px 0"><span class="co-chip ${kindRanked}">${emote}</span><div class="co-body">${body}${refHtml}</div></div>`;
      } else {
        node.innerHTML = items.map(x=>{
          const emote = (x._kind==='warn' ? '‚ö†Ô∏è' : (x._kind==='ccn' ? 'üìò' : 'üí°'));
          const ref = (x.url) ? `<small><a href="${x.url}" target="_blank" rel="noopener">${escapeHtml2(x.ref||'R√©f.')}</a></small>`
                              : (x.ref ? `<small>${escapeHtml2(x.ref)}</small>` : '');
          const body = renderRich(x.text||'');
          return `<div class="co-line" style="margin:8px 0"><span class="co-chip ${x._kind}">${emote}</span><div class="co-body">${body}${ref?'<br>'+ref:''}</div></div>`;
        }).join('');
      }

      node.style.display = 'block';
      const det = node.closest('details'); if (det) det.style.display = 'block';
    });
  }

  function mergeCapabilities(cap){
    if(!cap || typeof cap!=='object') return;
    GLOBAL_CAPABILITIES = {
      ...GLOBAL_CAPABILITIES,
      ...cap,
      work_time_modes: {
        ...(GLOBAL_CAPABILITIES.work_time_modes || {}),
        ...(cap.work_time_modes || {})
      },
      defaults: {
        ...(GLOBAL_CAPABILITIES.defaults || {}),
        ...(cap.defaults || {})
      }
    };
    applyCapabilities(GLOBAL_CAPABILITIES);
  }

  function radioWrapper(id){
    const el = document.getElementById(id);
    return el ? el.closest('.radio') : null;
  }
  function applyCapabilities(cap){
    const wm = (cap?.work_time_modes) || {};

    const showRadio = (id, show)=>{
      const input = document.getElementById(id);
      const wrap  = input ? input.closest('.radio') : null;
      if (wrap) wrap.style.display = show ? '' : 'none';
      if (input) input.disabled = !show;
    };
    const showRadios = (ids, show)=> ids.forEach(id=>showRadio(id, show));

    // Par d√©faut on montre tout
    showRadio('wt_35', true);
    showRadios(['wt_fh_pay','wt_fh_repos'], true);
    showRadio('wt_fd', true);
    showRadio('wt_m2', true);

    if (wm.standard === false) showRadio('wt_35', false);
    if ('forfait_hours' in wm && wm.forfait_hours === false) showRadios(['wt_fh_pay','wt_fh_repos'], false);
    if ('forfait_hours_mod2' in wm && wm.forfait_hours_mod2 === false) showRadio('wt_m2', false);

    const dfl = cap?.defaults || {};
    if (dfl.forfait_days_per_year){
      const fj = document.getElementById('forfait_days_per_year');
      if (fj && !fj.value){ fj.placeholder = String(dfl.forfait_days_per_year); }
    }
  }

  // Expose utilitaires partag√©s (appel√©s par d'autres modules)
  window.renderExplain      = renderExplain;
  window.mergeCapabilities  = mergeCapabilities;
  window.updateProgressUI   = updateProgressUI;
  window.SLOT_TARGETS       = Object.assign({}, (window.SLOT_TARGETS||{}), SLOT_TARGETS);

  /* ==========================
      Step 9 ‚Äî Clauses additionnelles
      (param√©trage des clauses)
  ===========================*/

  const selectedClauses = new Set();
  let customClauses = []; // [{title, text}]
  const clauseParamsByKey = {}; // { key: {param: value, param__label: '...'} }

  function ensureHidden(name){
    let el = document.getElementById(name);
    if (!el){
      el = document.createElement('input');
      el.type = 'hidden';
      el.id = name;
      el.name = name;
      document.body.appendChild(el);
    }
    return el;
  }

  // s√©rialise Set + custom + params
  function serializeClauses(){
    const sel = document.getElementById('clauses_selected_json') || ensureHidden('clauses_selected_json');
    const cus = document.getElementById('clauses_custom_json')   || ensureHidden('clauses_custom_json');
    const par = document.getElementById('clauses_params_json')   || ensureHidden('clauses_params_json');

    if (sel) sel.value = JSON.stringify(Array.from(selectedClauses));
    if (cus) cus.value = JSON.stringify(customClauses.filter(c => (c.title||c.text)));

    // collect params for selected clauses only
    const out = {};
    selectedClauses.forEach(k=>{
      const p = collectParamsForKey(k);
      if (p && Object.keys(p).length) out[k] = p;
    });
    par.value = JSON.stringify(out);

    updateProgressUI();
  }

  function renderClauseFlags(flags){
    if (!flags) return '';
    const xs = [];
    if (flags.sensitive) xs.push('‚ö†Ô∏è clause sensible');
    if (flags.needs_parameters) xs.push('‚ö†Ô∏è param√®tres √† adapter');
    return xs.length ? `<div class="clause-flags">${xs.join(' ¬∑ ')}</div>` : '';
  }

  // ---- rendu des param√®tres ----
  function renderParamControl(spec, key){
    const pid = `cp_${key}__${spec.key}`;
    const required = spec.required ? ' data-required="true" ' : '';
    const common = ` data-param="${escapeAttr(spec.key)}" data-ptype="${escapeAttr(spec.type||'text')}" ${required}`;
    const help = spec.help ? `<div class="text-small text-muted" style="margin-top:4px">${escapeHtml(spec.help)}</div>` : '';
    const value = clauseParamsByKey[key]?.[spec.key] ?? spec.default ?? '';

    switch((spec.type||'text').toLowerCase()){
      case 'textarea':
        return `
          <div>
            <label for="${pid}">${escapeHtml(spec.label||spec.key)}${spec.required?' *':''}</label>
            <textarea id="${pid}" rows="3" placeholder="${escapeAttr(spec.placeholder||'')}" ${common}>${escapeHtml(value||'')}</textarea>
            ${help}
          </div>`;
      case 'number':
      case 'money':
      case 'percent': {
        const step = (spec.step!=null) ? ` step="${escapeAttr(spec.step)}"` : ' step="0.01"';
        const min  = (spec.min!=null)  ? ` min="${escapeAttr(spec.min)}"`   : '';
        const max  = (spec.max!=null)  ? ` max="${escapeAttr(spec.max)}"`   : '';
        const suffix = (spec.type==='money') ? '‚Ç¨' : (spec.type==='percent' ? '%' : '');
        return `
          <div>
            <label for="${pid}">${escapeHtml(spec.label||spec.key)}${spec.required?' *':''}</label>
            <div class="input-with-suffix">
              <input id="${pid}" type="number"${step}${min}${max} placeholder="${escapeAttr(spec.placeholder||'')}" value="${escapeAttr(value)}" ${common}>
              ${suffix ? `<span class="suffix">${suffix}</span>` : ''}
            </div>
            ${help}
          </div>`;
      }
      case 'enum': {
        const opts = (spec.options||[]).map(o=>{
          const sel = (String(value) === String(o.value)) ? ' selected' : '';
          return `<option value="${escapeAttr(o.value)}"${sel}>${escapeHtml(o.label||String(o.value))}</option>`;
        }).join('');
        return `
          <div>
            <label for="${pid}">${escapeHtml(spec.label||spec.key)}${spec.required?' *':''}</label>
            <select id="${pid}" ${common}>
              <option value="">‚Äî</option>
              ${opts}
            </select>
            ${help}
          </div>`;
      }
      case 'boolean':
        return `
          <div class="line-check-right">
            <label class="nowrap" for="${pid}">${escapeHtml(spec.label||spec.key)}${spec.required?' *':''}</label>
            <input id="${pid}" type="checkbox" ${common} ${value ? 'checked':''}>
          </div>
          ${help ? `<div class="text-small text-muted" style="margin-top:4px">${escapeHtml(spec.help)}</div>` : ''}`;
      default:
        return `
          <div>
            <label for="${pid}">${escapeHtml(spec.label||spec.key)}${spec.required?' *':''}</label>
            <input id="${pid}" type="text" placeholder="${escapeAttr(spec.placeholder||'')}" value="${escapeAttr(value)}" ${common}>
            ${help}
          </div>`;
    }
  }

  function renderParamsBlock(it){
    if (!Array.isArray(it.params) || !it.params.length) return '';
    const rows = it.params.map(p => renderParamControl(p, it.key)).join('');
    return `
      <div class="clause-params" id="clp_${it.key}" style="display:none;margin-top:8px;border:1px dashed #cbd5e1;border-radius:8px;padding:10px;background:#f9fafb">
        <div class="text-small" style="font-weight:700;margin-bottom:6px">Param√®tres de cette clause</div>
        <div class="grid2">${rows}</div>
      </div>`;
  }

  function getParamInputsForKey(key){
    return Array.from(document.querySelectorAll(`#clp_${CSS.escape(key)} [data-param]`));
  }

  function collectParamsForKey(key){
    const inputs = getParamInputsForKey(key);
    if (!inputs.length) return {};
    const out = {};
    inputs.forEach(el=>{
      const pkey = el.dataset.param;
      const ptype = (el.dataset.ptype||'text').toLowerCase();
      if (!pkey) return;
      let val = null;
      if (ptype === 'boolean'){
        val = !!el.checked;
      } else if (ptype === 'number' || ptype === 'money' || ptype === 'percent'){
        const n = parseFloat(String(el.value||'').replace(',', '.'));
        val = Number.isNaN(n) ? null : n;
      } else {
        val = (el.value || '').trim();
      }
      out[pkey] = val;

      if (ptype === 'enum'){
        const opt = el.options?.[el.selectedIndex];
        if (opt) out[pkey+'__label'] = (opt.text || '').trim();
      }
    });
    clauseParamsByKey[key] = out;
    return out;
  }

  function restoreParamsForKey(key){
    const saved = clauseParamsByKey[key] || {};
    getParamInputsForKey(key).forEach(el=>{
      const pkey = el.dataset.param;
      const ptype = (el.dataset.ptype||'text').toLowerCase();
      if (!(pkey in saved)) return;
      if (ptype === 'boolean') el.checked = !!saved[pkey];
      else el.value = (saved[pkey] ?? '');
    });
  }

  function renderClausesCatalog(items){
    const box = document.getElementById('clauses_catalog'); if (!box) return;
    box.innerHTML = '';

    if (!items || !items.length){
      box.innerHTML = `<div class="callout-muted">Aucune clause disponible pour le moment.</div>`;
      return;
    }

    // Restaure l'√©tat (si retour √† l'√©tape)
    try{
      const selRaw = $('#clauses_selected_json')?.value || '[]';
      const sel = JSON.parse(selRaw);
      if (Array.isArray(sel)) { selectedClauses.clear(); sel.forEach(k=>selectedClauses.add(k)); }
      const pRaw = $('#clauses_params_json')?.value || '{}';
      const pObj = JSON.parse(pRaw);
      if (pObj && typeof pObj === 'object'){
        Object.keys(pObj).forEach(k=>{ clauseParamsByKey[k] = pObj[k]; });
      }
    }catch(_){}

    const learnMoreText = (label)=>{
      const l = (label || '').trim();
      const lower = l.toLowerCase();
      if (/^(clause|convention)/i.test(l)) return `+ En savoir plus sur ${lower}`;
      return `+ En savoir plus sur la clause de ${lower}`;
    };

    // Groupes pour une navigation claire
    const ccnItems = items.filter(it => (it.group||'common') === 'ccn');
    const genItems = items.filter(it => (it.group||'common') !== 'ccn');

    const appendSection = (title)=>{
      const section = document.createElement('div');
      section.className = 'fieldset';
      section.innerHTML = `<h4 style="margin:0 0 6px">${escapeHtml(title)}</h4>`;
      box.appendChild(section);
      return section;
    };

    const secCcn = ccnItems.length ? appendSection('Clauses conventionnelles (CCN)') : null;
    const secGen = genItems.length ? appendSection('Clauses contractuelles (mod√®les personnalisables)') : null;

    function renderOne(it){
      const id = `cl_${it.key}`;
      const el = document.createElement('div');
      el.className = 'clause-item';

      el.innerHTML = `
        <div class="clause-row">
          <input type="checkbox" id="${id}" data-key="${it.key}">
          <label class="clause-title" for="${id}">${escapeHtml(it.label||'')}</label>
          ${it.synopsis ? `<div class="clause-synopsis">${escapeHtml(it.synopsis)}</div>` : ''}
          ${renderClauseFlags(it.flags)}
          <details class="clause-more">
            <summary>${escapeHtml(learnMoreText(it.label))}</summary>
            <div class="body">
              ${it.learn_more_html || '<em>Aucun d√©tail suppl√©mentaire.</em>'}
              ${it.source_ref ? `<div style="margin-top:6px"><small>R√©f. : ${escapeHtml(it.source_ref)}</small></div>` : ''}
            </div>
          </details>
          ${renderParamsBlock(it)}
        </div>
      `;

      (it.group==='ccn' ? (secCcn||box) : (secGen||box)).appendChild(el);

      const cb = el.querySelector('input[type="checkbox"]');
      const paramsBlock = el.querySelector(`#clp_${CSS.escape(it.key)}`);

      // par d√©faut : inputs de param√®tres d√©sactiv√©s (activ√©s si case coch√©e)
      if (paramsBlock){
        paramsBlock.querySelectorAll('[data-param]').forEach(inp => { inp.disabled = true; });
      }

      // restauration
      if (selectedClauses.has(it.key)) {
        cb.checked = true;
        if (paramsBlock) {
          paramsBlock.style.display = (Array.isArray(it.params) && it.params.length) ? 'block' : 'none';
          paramsBlock.querySelectorAll('[data-param]').forEach(inp => { inp.disabled = false; });
          restoreParamsForKey(it.key);
        }
      }

      cb.addEventListener('change', (e)=>{
        const key = e.target.getAttribute('data-key');
        const checked = !!e.target.checked;

        if (checked) {
          selectedClauses.add(key);
          if (paramsBlock) {
            paramsBlock.style.display = (Array.isArray(it.params) && it.params.length) ? 'block' : 'none';
            paramsBlock.querySelectorAll('[data-param]').forEach(inp => { inp.disabled = false; });
            restoreParamsForKey(key);
          }
        } else {
          selectedClauses.delete(key);
          if (paramsBlock) {
            paramsBlock.style.display = 'none';
            paramsBlock.querySelectorAll('[data-param]').forEach(inp => { inp.disabled = true; });
          }
        }
        serializeClauses();
      });

      if (paramsBlock){
        paramsBlock.addEventListener('input',  ()=>{ collectParamsForKey(it.key); serializeClauses(); });
        paramsBlock.addEventListener('change', ()=>{ collectParamsForKey(it.key); serializeClauses(); });
      }
    }

    ccnItems.forEach(renderOne);
    genItems.forEach(renderOne);

    serializeClauses();
  }

  function renderCustomClauses(){
    const box = document.getElementById('custom_clauses_list'); if (!box) return;
    box.innerHTML = '';
    customClauses.forEach((c, idx)=>{
      const node = document.createElement('div');
      node.className = 'custom-clause';
      node.innerHTML = `
        <div class="grid2">
          <div>
            <label>Nom de votre clause</label>
            <input type="text" value="${escapeHtml(c.title||'')}" data-idx="${idx}" data-field="title" placeholder="Ex. Clause de t√©l√©travail">
          </div>
          <div class="align-right">
            <button type="button" class="btn remove" data-idx="${idx}">Supprimer</button>
          </div>
        </div>
        <div style="margin-top:6px">
          <label>Renseigner ici le contenu de votre clause sp√©cifique</label>
          <textarea rows="4" data-idx="${idx}" data-field="text" placeholder="R√©digez ici votre clause">${escapeHtml(c.text||'')}</textarea>
        </div>
      `;
      box.appendChild(node);
    });
    $$('#custom_clauses_list input[data-field], #custom_clauses_list textarea[data-field]').forEach(el=>{
      el.addEventListener('input', ()=>{
        const i = parseInt(el.getAttribute('data-idx'),10);
        const f = el.getAttribute('data-field');
        if (!Number.isNaN(i) && f && customClauses[i]) { customClauses[i][f] = el.value; serializeClauses(); }
      });
    });
    $$('#custom_clauses_list .remove').forEach(btn=>{
      btn.addEventListener('click', ()=>{
        const i = parseInt(btn.getAttribute('data-idx'),10);
        if (!Number.isNaN(i)) { customClauses.splice(i,1); renderCustomClauses(); serializeClauses(); }
      });
    });
  }

  async function refreshClausesCatalog(){
    ensureHidden('clauses_params_json'); // s'assurer qu'il existe
    const box = document.getElementById('clauses_catalog'); if (box) box.innerHTML = '<div class="muted">Chargement‚Ä¶</div>';
    try{
      const q = new URLSearchParams(); const idcc = getIdcc(); if (idcc) q.set('idcc', String(idcc));
      const r = await fetch('/api/clauses/catalog?'+q.toString());
      const js = await r.json();
      const items = js?.items || [];
      // Auto‚Äës√©lection clause TP (2216) si r√©gime temps partiel
      try{
        const regime = document.querySelector('input[name="work_time_regime"]:checked')?.value || null;
        // 2216 ‚Äî trait√© d√©sormais via les param√®tres g√©n√©riques Step 5 (plus de clause d√©di√©e)

        // 1501 ‚Äî coupures & amplitude d√©sormais g√©r√©es c√¥t√© Step 5 (capabilities). On garde le programme de travail si pr√©sent.
        if (idcc === 1501){
          const hasWP = items.some(it => it.key === 'work_program_prevenance_1501');
          if (hasWP && !selectedClauses.has('work_program_prevenance_1501')){
            selectedClauses.add('work_program_prevenance_1501');
          }
        }
      }catch(_){ /* silent */ }
      renderClausesCatalog(items);
    }catch(e){
      if (window.EDS_DEBUG) console.warn('clauses catalog failed', e);
      renderClausesCatalog([]);
    }
  }

  // Ajout de clause sp√©cifique (bouton)
  document.getElementById('btn_add_custom_clause')?.addEventListener('click', ()=>{
    customClauses.push({title:'', text:''});
    renderCustomClauses(); serializeClauses();
  });

  /* ==========================
     Aper√ßu & Brouillon
  ===========================*/

  const ALWAYS_INCLUDE = new Set([
    'rep_name', 'employee_name',
    'part_time_payload', 'ae_json',
    'clauses_selected_json', 'clauses_custom_json',
    'clauses_params_json'
  ]);

  $('#btn-preview')?.addEventListener('click', async ()=>{
    const fd = new FormData();

    document.querySelectorAll('input,select,textarea').forEach((src)=>{
      if(!src.name) return;
      if (src.name === 'anciennete_months') return;
      if(src.type==='radio' && !src.checked) return;
      if(src.type==='checkbox' && !src.checked) return;

      let val = src.value;
      if (src.type==='number' && typeof val==='string'){ val = val.replace(',', '.'); }

      const forceInclude = (src.name === 'ssn') || ALWAYS_INCLUDE.has(src.name);
      const isRequired = src.required || src.dataset.required==='true';
      if(!forceInclude && !isRequired && (val==='' || val==null)) return;

      fd.append(src.name, val ?? '');
    });

    // anciennet√© (m√™me calcul que pour le submit)
    const ancField = $('#anciennete_months');
    let ancVal = ancField?.value;
    if (ancVal == null || ancVal === '') {
      const y = parseInt($('#seniority_years')?.value || '0', 10) || 0;
      const m = parseInt($('#seniority_months')?.value || '0', 10) || 0;
      ancVal = String((y*12) + m);
    }
    fd.append('anciennete_months', ancVal);

    // √©tats c√¥t√© front
    fd.append('non_compliance_json', JSON.stringify(Array.from(EDS_NON_COMPLIANCES.values())));
    fd.append('overrides_steps', JSON.stringify(Array.from(EDS_OVERRIDES_STEPS)));
    fd.append('capabilities_json', JSON.stringify(GLOBAL_CAPABILITIES || {}));

    // flag d'aper√ßu
    fd.append('preview', '1');

    // Overlay
    const overlay = $('#overlay');
    const body = $('#preview-body');
    if (body) { body.innerHTML = '<div class="muted">G√©n√©ration de l‚Äôaper√ßu‚Ä¶</div>'; }
    overlay.style.display='block';

    try{
      const r = await fetch('/cdi/generate', { method:'POST', body: fd });
      const ct = r.headers.get('content-type') || '';
      if (!r.ok) throw new Error('HTTP ' + r.status);

      if (ct.includes('application/pdf')) {
        const blob = await r.blob();
        const url = URL.createObjectURL(blob);
        if (body) {
          body.innerHTML = '';
          const iframe = document.createElement('iframe');
          iframe.style.width = '100%';
          iframe.style.height = '80vh';
          iframe.setAttribute('title', 'Aper√ßu PDF');
          iframe.src = url;
          body.appendChild(iframe);
        }
      } else {
        const txt = await r.text();
        if (body) body.innerHTML = '<pre>'+escapeHtml(txt)+'</pre>';
      }
    } catch(e){
      if (body) body.innerHTML = '<div class="callout callout-warn">Aper√ßu indisponible : '+escapeHtml(String(e))+'</div>';
    }
  });

  $('#close-overlay')?.addEventListener('click', ()=> { $('#overlay').style.display='none'; });

  $('#btn-save')?.addEventListener('click', ()=>{
    const data = {};
    document.querySelectorAll('input,select,textarea').forEach((src)=>{
      if(!src.name) return;
      if(src.type==='radio' && !src.checked) return;
      if(src.type==='checkbox' && !src.checked) return;
      data[src.name] = src.value;
    });
    const ts = new Date().toISOString().replace(/[:.]/g,'-');
    const key = `EDS_CDI_BROUILLON_${ts}`;
    localStorage.setItem(key, JSON.stringify(data));
    alert(`Brouillon enregistr√© (${key})`);
  });

  /* ==========================
     Validation & Navigation
  ===========================*/

  // Visibilit√© r√©elle d‚Äôun champ
  function isActuallyVisible(el){
    if (!el) return false;
    const style = getComputedStyle(el);
    if (style.visibility === 'hidden' || style.display === 'none') return false;
    let n = el;
    while (n){
      const st = getComputedStyle(n);
      if (st.display === 'none' || st.visibility === 'hidden') return false;
      n = n.parentElement;
    }
    return el.getClientRects().length > 0;
  }

  // Champs requis visibles (et si param de clause, seulement si la clause est coch√©e)
  function requiredFields(stepIdx){
    const s = steps[stepIdx];
    if (!s) return [];
    const all = Array.from(s.querySelectorAll('[data-required="true"]'));
    return all.filter(el=>{
      if (!isActuallyVisible(el)) return false;
      const paramsBlock = el.closest('.clause-params');
      if (paramsBlock){
        const item = el.closest('.clause-item');
        const cb = item && item.querySelector('input[type="checkbox"][data-key]');
        if (cb && !cb.checked) return false;
      }
      return true;
    });
  }

  // Sanitize avant validation ‚Äî √©vite les blocages sur des formats tol√©r√©s visuellement
  function sanitizeStepInputs(stepIdx){
    const s = steps[stepIdx]; if (!s) return;
    if (stepIdx === 0){
      const siren = s.querySelector('input[name="siren_number"]');
      if (siren && siren.value){ siren.value = siren.value.replace(/\D+/g,'').slice(0,9); }
      const cp = s.querySelector('input[name="employer_postal_code"]');
      if (cp && cp.value){ cp.value = cp.value.replace(/\D+/g,'').slice(0,5); }
      // Compose rep_name (au cas o√π)
      syncRepName();
    }
    if (stepIdx === 1){
      syncEmployeeName();
      const ssn = s.querySelector('input[name="ssn"]');
      if (ssn && ssn.value){ ssn.value = ssn.value.replace(/[^\d ]+/g,'').trim(); }
    }
  }

  // allRequiredFilled (utilise requiredFields)
  function allRequiredFilled(stepIdx){
    const s = steps[stepIdx];
    if (!s) return false;
    // Ne jamais compter les √©tapes futures comme "faites"
    if (stepIdx > i) return false;

    // √âtape courante ‚Üí champs requis visibles
    // √âtape pass√©e   ‚Üí champs requis (m√™me si masqu√©s) pour √©viter l'effet "tout est rempli" sur un step cach√©
    let reqs = [];
    if (stepIdx === i) {
      reqs = requiredFields(stepIdx);
    } else {
      // √âtape pass√©e : on prend tous les requis, en gardant la logique de "si param de clause, seulement si la clause est coch√©e"
      reqs = Array.from(s.querySelectorAll('[data-required="true"]')).filter(el=>{
        const paramsBlock = el.closest('.clause-params');
        if (paramsBlock){
          const item = el.closest('.clause-item');
          const cb = item && item.querySelector('input[type="checkbox"][data-key]');
          if (cb && !cb.checked) return false;
        }
        return true;
      });
    }

    return reqs.every(el=>{
      if(el.type === 'radio'){
        const group = s.querySelectorAll(`input[name="${el.name}"]`);
        return Array.from(group).some(r=>r.checked);
      }
      if(el.type === 'checkbox') return el.checked;
      if(el.checkValidity) return el.value?.trim() && el.checkValidity();
      return !!el.value?.trim();
    });
  }

  function hasVisibleError(stepIdx){
    const s = steps[stepIdx];
    if(!s) return false;
    const errs = Array.from(s.querySelectorAll('.error-msg'));
    return errs.some(e => getComputedStyle(e).display !== 'none');
  }

  function computeStepCompletion(){
    const done = new Array(steps.length).fill(false);

    // 1. Employeur
    done[0] = allRequiredFilled(0) && !hasVisibleError(0);

    // 2. Salari√©
    done[1] = allRequiredFilled(1) && !hasVisibleError(1);

    // 3. CCN
    const idccOk = !!getIdcc(); const noCcnOk = !!$('#no_ccn')?.checked;
    done[2] = (idccOk || noCcnOk) && !hasVisibleError(2);

    // 4. Classification
    const classifOk = !!$('#classification_level')?.value?.trim();
    done[3] = allRequiredFilled(3) && classifOk && !hasVisibleError(3);

    // 5. Dur√©e du travail
    let ttOk = false;
    const regSel  = document.querySelector('input[name="work_time_regime"]:checked')?.value || null;
    const modeSel = document.querySelector('input[name="work_time_mode"]:checked')?.value || null;

    if (regSel === 'temps_complet') {
      if (!modeSel) {
        ttOk = false;
      } else if (modeSel === 'standard_35h') {
        const v = $('#weekly_hours_std')?.value;
        ttOk = !!v && !hasVisibleError(4);
      } else if (modeSel === 'forfait_hours') {
        const v = $('#weekly_hours_fh')?.value;
        const err = $('#fh_err'); const errVisible = err && getComputedStyle(err).display !== 'none';
        ttOk = !!v && !errVisible && !hasVisibleError(4);
      } else if (modeSel === 'forfait_days') {
        const v = $('#forfait_days_per_year')?.value;
        ttOk = !!v && !hasVisibleError(4);
      } else if (modeSel === 'modalite_2') {
        const v = $('#weekly_hours_m2')?.value;
        const err = $('#m2_err'); const errVisible = err && getComputedStyle(err).display !== 'none';
        ttOk = !!v && !errVisible && !hasVisibleError(4);
      }
    } else if (regSel === 'temps_partiel') {
      const w = $('#weekly_hours_std')?.value;
      const orgFixed = $('#pt_org_fixed')?.checked;
      const orgMonth = $('#pt_org_month')?.checked;
      const err = $('#std_err'); const errVisible = err && getComputedStyle(err).display !== 'none';
      ttOk = !!w && (orgFixed || orgMonth) && !errVisible && !hasVisibleError(4);
    } else {
      ttOk = false;
    }
    done[4] = ttOk;

    // 6. R√©mun√©ration
    const sal = $('#salary_gross_monthly')?.value;
    const salErrVisible = $('#salary_err') && getComputedStyle($('#salary_err')).display!=='none';
    done[5] = !!sal && !salErrVisible && !hasVisibleError(5);

    // 7. Essai
    const essai = $('#probation_months')?.value;
    const essErr = $('#probation_err'); const essErrVisible = essErr && getComputedStyle(essErr).display!=='none';
    done[6] = (essai!=='' && essai!=null) && !essErrVisible && !hasVisibleError(6);

    // 8. Pr√©avis & Cong√©s
    const dem = $('#notice_dem')?.value;
    const lic = $('#notice_lic')?.value;
    const demErrV = $('#notice_dem_err') && getComputedStyle($('#notice_dem_err')).display!=='none';
    const licErrV = $('#notice_lic_err') && getComputedStyle($('#notice_lic_err')).display!=='none';
    const cpErrV  = $('#cp_err') && getComputedStyle($('#cp_err')).display!=='none';
    done[7] = !!dem && !!lic && !demErrV && !licErrV && !cpErrV && !hasVisibleError(7);

    // 9. Clauses
    const selRaw = $('#clauses_selected_json')?.value || '[]';
    const cusRaw = $('#clauses_custom_json')?.value || '[]';
    let hasClauses = false;
    try {
      const sel = JSON.parse(selRaw); const cus = JSON.parse(cusRaw);
      hasClauses = (Array.isArray(sel) && sel.length>0) || (Array.isArray(cus) && cus.some(c => (c.title||c.text)));
    } catch(_) {}
    done[8] = (i >= 8) || hasClauses;

    // 10. Formalit√©s
    const sigPlace = $('input[name="place_of_signature"]')?.value;
    const sigDate  = $('input[name="date_of_signature"]')?.value;
    const copies   = $('input[name="copies_count"]')?.value;
    done[9] = !!sigPlace && !!sigDate && !!copies && !cpErrV && !hasVisibleError(9);

    return done;
  }

  function updateProgressUI(){
    if (!steps || !steps.length) return;
    const doneFlags = computeStepCompletion();
    const doneCount = doneFlags.filter(Boolean).length;
    const total = steps.length;

    const bar = $('#progress');
    if(bar){ bar.style.width = Math.round((doneCount/total)*100) + '%'; }

    const items = Array.from(document.querySelectorAll('#steps li'));
    const firstIncomplete = doneFlags.indexOf(false);
    items.forEach((li, idx)=>{
      li.classList.toggle('current', idx===i);
      li.classList.toggle('done', doneFlags[idx]);
      const blocked = (firstIncomplete !== -1 && idx > firstIncomplete);
      li.classList.toggle('blocked', blocked && !doneFlags[idx]);
      li.classList.toggle('incomplete', idx === firstIncomplete);
      if (idx === firstIncomplete) li.setAttribute('title','√Ä compl√©ter'); else li.removeAttribute('title');
      li.setAttribute('aria-current', idx===i ? 'step' : 'false');
    });
  }

  function validate(stepIdx){
    for(const el of requiredFields(stepIdx)){
      el.setAttribute('required','');
      if (el.type === 'checkbox' || el.type === 'radio') {
        if (el.checkValidity && !el.checkValidity()){
          el.reportValidity?.(); el.focus(); return false;
        }
      } else {
        if(!el.value || (el.checkValidity && !el.checkValidity())){
          el.reportValidity?.(); el.focus(); return false;
        }
      }
    }
    const nxt = steps[stepIdx].querySelector('[data-next]');
    if(nxt && nxt.disabled) return false;
    return true;
  }

  // D√©l√©gation unique √† eds_worktime.js
  function refreshWorktimeDelegated(){
    if (window.EDS_WT?.refresh) window.EDS_WT.refresh();
  }

  function setState(){
    steps.forEach((s,idx)=> s.setAttribute('aria-hidden', idx===i ? 'false':'true'));
    window.scrollTo({top:0,behavior:'smooth'});

    if (i === 3) {
      if (window.EDS_CLASSIF?.refresh) window.EDS_CLASSIF.refresh();
      (async ()=>{
        try{
          const idcc = getIdcc();
          if (!idcc) return;
          const q = new URLSearchParams({ theme: 'classification', idcc: String(idcc), categorie: getCategorie() });
          const r = await fetch('/api/resolve?'+q.toString());
          const js = await r.json();
          if (js?.explain) renderExplain(js.explain);
        }catch(e){ if(window.EDS_DEBUG) console.warn('classification hints failed', e); }
      })();
    }

    // √âtape 3 (index 2) ‚Äî assure le rafra√Æchissement/affichage CCN
    if (i === 2 && window.EDS_CCN_AE?.refresh) {
      window.EDS_CCN_AE.refresh();
    }

    if (i === 4) { refreshWorktimeDelegated(); }

    if (i === 5 && window.EDS_SAL?.refresh) {
      clearSalaryExplain();
      window.EDS_SAL.refresh();
    }

    if (i === 6 && window.EDS_ESSAI?.refresh)   window.EDS_ESSAI.refresh();
    if (i === 7 && window.EDS_PREAVIS?.refresh) window.EDS_PREAVIS.refresh();

    if (i === 8) { // Step 9 (index 8)
      if (!document.getElementById('clauses_catalog')?.hasChildNodes()) {
        refreshClausesCatalog();
      }
      renderCustomClauses();
      serializeClauses();
    }

    updateProgressUI();
  }

  // Rendre le sommaire cliquable et utilisable au clavier
  (function makeSummaryInteractive(){
    const list = document.getElementById('steps');
    if (!list) return;
    const lis = Array.from(list.querySelectorAll('li'));
    lis.forEach(li => li.setAttribute('tabindex','0'));

    function tryGoto(stepIdx){
      try{
        const doneFlags = computeStepCompletion();
        const firstIncomplete = doneFlags.indexOf(false);
        const allowed = (firstIncomplete === -1) ? true : (stepIdx <= firstIncomplete);
        if (!allowed){
          const items = Array.from(document.querySelectorAll('#steps li'));
          const target = items[firstIncomplete]?.textContent || `√âtape ${firstIncomplete+1}`;
          alert(`Compl√©tez d'abord l'√©tape :\n- ${target}`);
          return;
        }
      }catch(_){ /* fail‚Äësoft */ }
      i = stepIdx;
      setState();
    }

    list.addEventListener('click', (e)=>{
      const li = e.target.closest('li');
      if (!li || !list.contains(li)) return;
      const step = parseInt(li.getAttribute('data-step')||'0', 10);
      if (!Number.isInteger(step) || step<=0) return;
      tryGoto(step-1);
    });
    list.addEventListener('keydown', (e)=>{
      if (!['Enter',' '].includes(e.key)) return;
      const li = e.target.closest('li');
      if (!li || !list.contains(li)) return;
      const step = parseInt(li.getAttribute('data-step')||'0', 10);
      if (!Number.isInteger(step) || step<=0) return;
      e.preventDefault();
      tryGoto(step-1);
    });
  })();

  // Navigation
  document.querySelectorAll('[data-next]').forEach(btn=>{
    btn.addEventListener('click', (e)=>{
      e.preventDefault();
      sanitizeStepInputs(i);
      if (!validate(i)) return;
      if (i < steps.length - 1) {
        if (i === 2) {
          // fige l'IDCC √† la sortie de l'√©tape CCN (fallback si la fonction n'existe pas)
          if (typeof window.setIdccFromInput === 'function') {
            window.setIdccFromInput();
          } else {
            const v = $('#ccn_search')?.value || '';
            const m = /^\s*(\d{4})\b/.exec(String(v||''));
            const id = m ? m[1] : '';
            const hid = $('#idcc');
            // Ne pas √©craser l'idcc existant si l'input est vide/non valide
            if (hid && id) hid.value = id;
          }
        }
        i++;
        setState();
      }
    });
  });

  document.querySelectorAll('[data-prev]').forEach(btn=>{
    btn.addEventListener('click', (e)=>{
      e.preventDefault();
      if(i>0){ i--; setState(); }
    });
  });

  // Progression sur saisies
  const rafUpdate = ()=> window.requestAnimationFrame(updateProgressUI);
  document.addEventListener('input', rafUpdate, true);
  document.addEventListener('change', rafUpdate, true);

  // Overrides globaux √©tape 8 (bouton "Continuer quand m√™me")
  document.addEventListener('click', (e)=>{
    const t = e.target;
    if (!t) return;
    if (t.id && t.id.endsWith('_override')){
      const stepNode = t.closest('.step');
      if (stepNode && stepNode.getAttribute('data-step') === '8'){
        const inp = stepNode.querySelector('input.input-error') ||
                    stepNode.querySelector('input[name="notice_resignation_months"], input[name="notice_dismissal_months"], input[name="cp_days_number"]');
        inp?.setCustomValidity?.('');
        EDS_OVERRIDES_STEPS.add(8);
        const nextBtn = stepNode.querySelector('[data-next]');
        if (nextBtn) { nextBtn.disabled = false; nextBtn.classList.remove('disabled'); }
        updateProgressUI();
      }
    }
  });

  // Gestion universelle des boutons "Continuer quand m√™me" / "Ramener √† X"
  document.addEventListener('click', (e)=>{
    const btn = e.target;
    if (!btn || !btn.id) return;

    if (btn.id.endsWith('_override')) {
      const stepNode = btn.closest('.step');
      if (!stepNode) return;
      const stepNum = parseInt(stepNode.getAttribute('data-step'), 10);

      btn.classList.add('is-on');
      btn.setAttribute('aria-pressed','true');

      stepNode.dataset.override = 'on';
      if (!Number.isNaN(stepNum)) EDS_OVERRIDES_STEPS.add(stepNum);

      setNextDisabled(stepNum, false);

      const targetInput =
        stepNode.querySelector('input.input-error, select.input-error, textarea.input-error') ||
        stepNode.querySelector('input[name], select[name], textarea[name]');
      targetInput?.setCustomValidity?.('');

      updateProgressUI();
    }

    if (btn.id.endsWith('_fix')) {
      const stepNode = btn.closest('.step');
      if (!stepNode) return;
      const stepNum = parseInt(stepNode.getAttribute('data-step'), 10);

      delete stepNode.dataset.override;
      if (!Number.isNaN(stepNum)) EDS_OVERRIDES_STEPS.delete(stepNum);

      updateProgressUI();
    }
  });

  /* ==========================
     Soumission PDF
  ===========================*/

  const submitBtn = $('#btn-submit');
  if(submitBtn){
    submitBtn.addEventListener('click', function(e){
      e.preventDefault();

      // Validation globale avant g√©n√©ration : toutes les √©tapes essentielles doivent √™tre compl√®tes
      try{
        const doneFlags = computeStepCompletion();
        const overrides = new Set(Array.from(window.EDS_OVERRIDES_STEPS || []));
        const items = Array.from(document.querySelectorAll('#steps li'));
        const incompleteIdx = doneFlags.map((ok, idx)=> ok ? null : idx).filter(idx=> idx!==null);
        // √âtapes incompl√®tes qui ne sont PAS explicitement overrid√©es
        let blockingIdx = incompleteIdx.filter(idx => !overrides.has(idx+1));
        if (blockingIdx.length){
          // Cas particulier: toutes les √©tapes "bloquantes" correspondent en r√©alit√© √† des non‚Äëconformit√©s (override conscient)
          const issueSteps = new Set(Array.from(window.EDS_NON_COMPLIANCES?.values?.() || window.EDS_NON_COMPLIANCES || []).map(it=> parseInt(it.step||0,10)).filter(Boolean));
          const stillBlocking = blockingIdx.filter(idx => !issueSteps.has(idx+1));
          if (stillBlocking.length){
            const missing = stillBlocking.map(idx => (items[idx]?.textContent||`√âtape ${idx+1}`));
            alert(`Veuillez compl√©ter les champs essentiels avant de g√©n√©rer le PDF.\n√âtapes incompl√®tes :\n- ${missing.join('\n- ')}`);
            // Redirige l‚Äôutilisateur vers la premi√®re √©tape r√©ellement bloquante (non overrid√©e et sans non‚Äëconformit√© assum√©e)
            i = stillBlocking[0];
            setState();
            return;
          }
          // Sinon: uniquement des non‚Äëconformit√©s assum√©es ‚Üí laisser passer vers la confirmation finale
        }
      }catch(_){ /* si la validation jette, on laisse passer la soumission classique */ }

      // S'il y a des overrides/alertes, afficher la confirmation finale
      const issuesCount = (EDS_NON_COMPLIANCES?.size || 0);
      const overridesCount = (EDS_OVERRIDES_STEPS?.size || 0);
      if (issuesCount || overridesCount){
        const cBody = document.getElementById('confirm-body');
        if (cBody){ cBody.innerHTML = buildConfirmSummaryHTML(); }
        document.getElementById('confirm-overlay').style.display = 'block';
        return;
      }

      // sinon: soumission directe
      buildAndSubmitForm();
    });
  }

  function buildAndSubmitForm(){
    const form = document.createElement('form');
    form.method='post';
    form.action='/cdi/generate';

    document.querySelectorAll('input,select,textarea').forEach(function(src){
      if(!src.name) return;
      if (src.name === 'anciennete_months') return;
      if(src.type==='radio' && !src.checked) return;
      if(src.type==='checkbox' && !src.checked) return;

      let val = src.value;
      if (src.type==='number' && typeof val==='string'){ val = val.replace(',', '.'); }

      const forceInclude = (src.name === 'ssn') || ALWAYS_INCLUDE.has(src.name);
      const isRequired = src.required || src.dataset.required==='true';
      if(!forceInclude && !isRequired && (val==='' || val==null)) return;

      const hidden = document.createElement('input');
      hidden.type='hidden'; hidden.name=src.name; hidden.value=val ?? '';
      form.appendChild(hidden);
    });

    // anciennet√©
    const ancField = $('#anciennete_months');
    let ancVal = ancField?.value;
    if (ancVal == null || ancVal === '') {
      const y = parseInt($('#seniority_years')?.value || '0', 10) || 0;
      const m = parseInt($('#seniority_months')?.value || '0', 10) || 0;
      ancVal = String((y*12) + m);
    }
    const ancHidden = document.createElement('input');
    ancHidden.type = 'hidden'; ancHidden.name = 'anciennete_months'; ancHidden.value = ancVal;
    form.appendChild(ancHidden);

    const hNc = document.createElement('input');
    hNc.type='hidden'; hNc.name='non_compliance_json'; hNc.value = JSON.stringify(Array.from(EDS_NON_COMPLIANCES.values()));
    form.appendChild(hNc);

    const hOv = document.createElement('input');
    hOv.type='hidden'; hOv.name='overrides_steps'; hOv.value = JSON.stringify(Array.from(EDS_OVERRIDES_STEPS));
    form.appendChild(hOv);

    const hCap = document.createElement('input');
    hCap.type='hidden'; hCap.name='capabilities_json'; hCap.value = JSON.stringify(GLOBAL_CAPABILITIES || {});
    form.appendChild(hCap);

    document.body.appendChild(form);
    form.submit();
  }

  function buildConfirmSummaryHTML(){
    const issues = Array.from(EDS_NON_COMPLIANCES.values() || []);
    const overrides = Array.from(EDS_OVERRIDES_STEPS || []);
    const steps = Array.from(document.querySelectorAll('#steps li'));
    const stepLabel = (n)=> (steps.find(li => parseInt(li.getAttribute('data-step')||'0',10)===n)?.textContent || `√âtape ${n}`);

    const warnHard = issues.some(it => (it.severity||'').toLowerCase()==='hard');
    const lines = [];

    lines.push(`<div class="callout ${warnHard?'callout-warn':'callout-info'}">${warnHard ? 'Certaines valeurs s‚Äô√©cartent des bornes minimales/maximales.' : 'V√©rifiez votre saisie avant g√©n√©ration.'}</div>`);

    if (overrides.length){
      const list = overrides.sort((a,b)=>a-b).map(n=> `<li>${escapeHtml(stepLabel(n))}</li>`).join('');
      lines.push(`<div><strong>√âtapes avec override</strong><ul>${list}</ul></div>`);
    }
    if (issues.length){
      const rows = issues.map(it=>{
        const st = parseInt(it.step||0,10);
        const label = stepLabel(st);
        const sev = (it.severity||'info').toLowerCase();
        const icon = sev==='hard' ? '‚ö†Ô∏è' : 'üí°';
        const msg = escapeHtml(it.message||'Valeur hors borne');
        const sug = (it.suggested!=null) ? ` ‚Üí sugg√©r√©: <b>${escapeHtml(String(it.suggested))}</b>` : '';
        return `<li>${icon} ${escapeHtml(label)} ‚Äî ${msg}${sug}</li>`;
      }).join('');
      lines.push(`<div><strong>Alertes</strong><ul>${rows}</ul></div>`);
    }

    // Accords d‚Äôentreprise d√©clar√©s (si existants)
    try{
      const aeRaw = document.getElementById('ae_json')?.value || '';
      if (aeRaw){
        const ae = JSON.parse(aeRaw);
        const items = Array.isArray(ae?.items) ? ae.items : [];
        if (items.length){
          const rows = items.map((it)=> `<li>${escapeHtml(it.title||'Accord d‚Äôentreprise')}${it.date?` (<i>${escapeHtml(it.date)}</i>)`:''}</li>`).join('');
          lines.push(`<div><strong>Accords d‚Äôentreprise d√©clar√©s</strong><ul>${rows}</ul></div>`);
        }
      }
    }catch(_){ /* ignore */ }

    return lines.join('');
  }

  // Boutons overlay confirmation
  document.getElementById('close-confirm')?.addEventListener('click', ()=>{
    document.getElementById('confirm-overlay').style.display = 'none';
  });
  document.getElementById('confirm-fix')?.addEventListener('click', ()=>{
    let targetStep = null;
    const issues = Array.from(EDS_NON_COMPLIANCES.values() || []);
    if (issues.length){ targetStep = Math.min(...issues.map(it=> parseInt(it.step||0,10)).filter(Boolean)); }
    if (!targetStep && EDS_OVERRIDES_STEPS.size){ targetStep = Math.min(...Array.from(EDS_OVERRIDES_STEPS)); }
    if (targetStep){ i = targetStep-1; setState(); }
    document.getElementById('confirm-overlay').style.display = 'none';
  });
  document.getElementById('confirm-submit')?.addEventListener('click', ()=>{
    document.getElementById('confirm-overlay').style.display = 'none';
    buildAndSubmitForm();
  });

  /* ==========================
     INIT
  ===========================*/

  function syncRepName(){
    const kind = document.querySelector('input[name="rep_signatory_kind"]:checked')?.value || 'physique';
    const hidden = $('#rep_name_hidden');
    if (!hidden) return;
    if (kind === 'morale'){
      const last = ($('input[name="rep_entity_rep_last_name"]')?.value || '').trim();
      const first = ($('input[name="rep_entity_rep_first_name"]')?.value || '').trim();
      hidden.value = [first, last].filter(Boolean).join(' ');
    } else {
      const last = ($('input[name="rep_last_name"]')?.value || '').trim();
      const first = ($('input[name="rep_first_name"]')?.value || '').trim();
      hidden.value = [first, last].filter(Boolean).join(' ');
    }
    updateProgressUI();
  }
  function toggleRepKind(){
    const kind = document.querySelector('input[name="rep_signatory_kind"]:checked')?.value || 'physique';
    const phys = (kind === 'physique');
    const boxPhys = document.getElementById('rep_phys_box');
    const boxMor  = document.getElementById('rep_moral_box');
    if (boxPhys) boxPhys.style.display = phys ? '' : 'none';
    if (boxMor)  boxMor.style.display  = phys ? 'none' : '';
    // Required toggles
    ['rep_civility','rep_last_name','rep_first_name','rep_title'].forEach(n=>{
      const el = document.querySelector(`[name="${n}"]`); if (el){ if (phys) el.setAttribute('data-required','true'); else el.removeAttribute('data-required'); }
    });
    ['rep_entity_name','rep_entity_legal_form','rep_entity_rep_last_name','rep_entity_rep_first_name','rep_entity_rep_title'].forEach(n=>{
      const el = document.querySelector(`[name="${n}"]`); if (el){ if (!phys) el.setAttribute('data-required','true'); else el.removeAttribute('data-required'); }
    });
    syncRepName();
  }
  ;['input[name="rep_last_name"]','input[name="rep_first_name"]','input[name="rep_entity_rep_last_name"]','input[name="rep_entity_rep_first_name"]']
    .forEach(sel=>{ $(sel)?.addEventListener('input', syncRepName); });
  ;['#rep_kind_phys','#rep_kind_moral'].forEach(sel=> $(sel)?.addEventListener('change', toggleRepKind));

  function syncEmployeeName(){
    const last = ($('input[name="employee_last_name"]')?.value || '').trim();
    const first = ($('input[name="employee_first_name"]')?.value || '').trim();
    const hidden = $('#employee_name_hidden');
    if(hidden){ hidden.value = [first, last].filter(Boolean).join(' '); }
    updateProgressUI();
  }
  ['input[name="employee_last_name"]','input[name="employee_first_name"]']
    .forEach(sel=>{ $(sel)?.addEventListener('input', syncEmployeeName); });

  // Rendre le NIR (SSN) optionnel c√¥t√© UI
  (function makeSsnOptional(){
    const _ssn = document.querySelector('input[name="ssn"]');
    if (_ssn) {
      _ssn.removeAttribute('data-required');
      _ssn.removeAttribute('required');
      if (!_ssn.placeholder || _ssn.placeholder.toLowerCase().includes('15 chiffres')) {
        _ssn.placeholder = '15 chiffres (si connu)';
      }
    }
  })();

  normalizeStaticLabels();
  toggleRepKind();

  // (si d√©fini ailleurs)
  window.refreshMissionBlocks?.();

  // Step 9 ‚Äî init des hidden et de la liste ‚Äúcustom‚Äù
  ensureHidden('clauses_selected_json');
  ensureHidden('clauses_custom_json');
  ensureHidden('clauses_params_json');
  renderCustomClauses();
  serializeClauses();

  // Affiche l'√©tape 1
  setState();

  // Refresher tous les th√®mes apr√®s changement CCN
  function refreshAllThemes(){
    clearSalaryExplain();
    refreshWorktimeDelegated();
    if (window.EDS_SAL?.refresh)     window.EDS_SAL.refresh();
    if (window.EDS_ESSAI?.refresh)   window.EDS_ESSAI.refresh();
    if (window.EDS_PREAVIS?.refresh) window.EDS_PREAVIS.refresh();
    updateProgressUI();
  }
})();
</script>


<script>window.EDS_DOC = 'cdi';</script>

<script src="{{ url_for('static', path='js/cdi.js') }}"></script>  {# sp√©cifique au formulaire CDI #}
<script src="{{ url_for('static', path='js/common/eds_ccn_ae.js') }}"></script>
<script src="{{ url_for('static', path='js/common/eds_classif.js') }}"></script>
<script src="{{ url_for('static', path='js/common/eds_step4.js') }}"></script>
<script src="{{ url_for('static', path='js/common/eds_worktime.js') }}"></script>
<script src="{{ url_for('static', path='js/common/eds_salary.js') }}"></script>
<script src="{{ url_for('static', path='js/common/eds_essai.js') }}"></script>
<script src="{{ url_for('static', path='js/common/eds_preavis.js') }}"></script>

{% endblock %}
