name: Legifrance Watch
on:
  schedule: [{ cron: "0 6 * * 1-5" }]  # jours ouvrés à 06:00 UTC
  workflow_dispatch: {}

jobs:
  watch:
    runs-on: ubuntu-latest
    env:
      PISTE_OAUTH_URL: https://sandbox-oauth.piste.gouv.fr/api/oauth/token
      PISTE_API_URL: https://sandbox-api.piste.gouv.fr/dila/legifrance/lf-engine-app
      PISTE_CLIENT_ID: ${{ secrets.PISTE_CLIENT_ID }}
      PISTE_CLIENT_SECRET: ${{ secrets.PISTE_CLIENT_SECRET }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - run: python -m pip install pyyaml requests
      - name: Run watch (no strict)
        id: runwatch
        run: |
          python -m scripts.watch_legifrance || true
      - name: Upload report artifact
        uses: actions/upload-artifact@v4
        with:
          name: legifrance-watch-report
          path: reports/legifrance_watch/*.json
      - name: Create/update issue on changes
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const glob = require('glob');
            const files = glob.sync('reports/legifrance_watch/*.json');
            if (files.length === 0) return;
            const latest = files.sort().slice(-1)[0];
            const report = JSON.parse(fs.readFileSync(latest, 'utf8'));
            if ((report.count.changed || report.count.new || report.count.errors) === 0) return;
            const body = [
              `**Legifrance Watch** (${report.timestamp})`,
              `- Changed: ${report.count.changed}`,
              `- New: ${report.count.new}`,
              `- Errors: ${report.count.errors}`,
              '',
              ...(report.changed || []).flatMap(c => [
                `- [CHANGED] ${c.id}`,
                ...(c.files || []).map(f => `  - ${f}`),
              ]),
              ...(report.new || []).flatMap(n => [
                `- [NEW] ${n.id}`,
                ...(n.files || []).map(f => `  - ${f}`),
              ]),
              ...(report.errors || []).flatMap(e => [
                `- [ERROR] ${e.id} — ${e.error}`,
                ...(e.files || []).map(f => `  - ${f}`),
              ]),
            ].join('\n');
            // create or update a single rolling issue
            const { data: issues } = await github.rest.issues.listForRepo({ owner: context.repo.owner, repo: context.repo.repo, state: 'open', labels: 'legifrance-watch' });
            if (issues.length === 0) {
              await github.rest.issues.create({ owner: context.repo.owner, repo: context.repo.repo, title: 'Legifrance Watch – changements détectés', body, labels: ['legifrance-watch'] });
            } else {
              await github.rest.issues.createComment({ owner: context.repo.owner, repo: context.repo.repo, issue_number: issues[0].number, body });
            }
